7: *
1: file
1: lists
1: h
1: date
4: :
4: :
1: author
1: Martin
1: Noblia
1: email
1: martin
1: noblia
1: openmailbox
1: org
1: brief
1: detail
1: Licence
4: :
1: This
1: program
1: is
1: free
1: software
4: :
1: you
1: can
1: redistribute
1: it
1: and
1: or
1: modify
1: it
1: under
1: the
1: terms
1: of
1: the
1: GNU
1: General
1: Public
1: License
1: as
1: published
1: by
1: the
1: Free
1: Software
1: Foundation
1: either
1: version
1: of
1: the
1: License
1: or
2: (
1: at
1: your
1: option
3: )
1: any
1: later
1: version
1: This
1: program
1: is
1: distributed
1: in
1: the
1: hope
1: that
1: it
1: will
1: be
1: useful
1: but
1: WITHOUT
1: ANY
1: WARRANTY
6: ;
1: without
1: even
1: the
1: implied
1: warranty
1: of
1: MERCHANTABILITY
1: or
1: FITNESS
1: FOR
1: A
1: PARTICULAR
1: PURPOSE
1: See
1: the
1: GNU
1: General
1: Public
1: License
1: for
1: more
1: details
1: You
1: should
1: have
1: received
1: a
1: copy
1: of
1: the
1: GNU
1: General
1: Public
1: License
7: *
1: ifndef
1: LISTS_H
1: define
1: LISTS_H
7: *
1: includes
7: *
1: include
1: stdlib
1: h
1: include
1: stdio
1: h
1: include
1: inttypes
1: h
7: *
7: *
1: General
7: *
1: int
1: sum
2: (
1: int
1: a
1: int
1: b
3: )
6: ;
7: *
7: *
1: defines
7: *
1: define
1: LISTS_STATUS_OK
1: define
1: LISTS_STATUS_ERROR
7: *
7: *
1: macros
7: *
1: define
1: LISTS_SIZE
2: (
1: list
3: )
2: (
2: (
1: list
3: )
1: size
3: )
1: define
1: LISTS_HEAD
2: (
1: list
3: )
2: (
2: (
1: list
3: )
1: head
3: )
1: define
1: LISTS_TAIL
2: (
1: list
3: )
2: (
2: (
1: list
3: )
1: tail
3: )
1: define
1: LISTS_SINGLE_IS_HEAD
2: (
1: SingleLinked
1: Node
3: )
2: (
2: (
1: node
3: )
1: next
1: NULL
1: true
4: :
1: false
3: )
1: define
1: LISTS_GET_DATA
2: (
1: node
3: )
2: (
2: (
1: node
3: )
1: data
3: )
1: define
1: LISTS_GET_NEXT
2: (
1: node
3: )
2: (
2: (
1: node
3: )
1: next
3: )
7: *
7: *
1: prototypes
1: general
1: functions
7: *
1: static
1: void
1: lists_general_show_error
2: (
1: const
1: char
7: *
1: message
3: )
6: ;
7: *
7: *
1: Single
1: linked
1: lists
7: *
7: *
1: TODO
2: (
1: elsuizo
4: :
3: )
4: :
1: put
1: here
1: a
1: definition
1: of
1: this
1: data
1: structure
7: *
7: *
7: *
1: custom
1: data
1: types
7: *
1: struct
1: Node
10: {
1: void
7: *
1: data
6: ;
1: struct
1: Node
7: *
1: next
6: ;
11: }
6: ;
1: struct
1: SingleLinked
10: {
1: struct
1: Node
7: *
1: head
6: ;
1: struct
1: Node
7: *
1: tail
6: ;
1: struct
1: Node
7: *
1: current
6: ;
1: uint8_t
1: size
6: ;
11: }
6: ;
7: *
1: function
1: pointers
1: to
1: functions
1: for
1: display
1: the
1: single
1: linked
1: lists
7: *
1: typedef
1: void
2: (
7: *
1: LISTS_SINGLE_DISPLAY
3: )
2: (
1: void
7: *
3: )
6: ;
7: *
1: return
1: void
1: take
1: void
7: *
7: *
7: *
1: function
1: pointers
1: to
1: functions
1: for
1: compare
1: two
1: lists
7: *
1: typedef
1: int
2: (
7: *
1: LISTS_SINGLE_COMPARE
3: )
2: (
1: void
7: *
1: void
7: *
3: )
6: ;
7: *
1: return
1: uint8_t
1: take
1: two
1: void
7: *
7: *
7: *
7: *
1: prototypes
7: *
1: extern
1: void
1: lists_single_linked_init
2: (
1: struct
1: SingleLinked
7: *
1: slist
3: )
6: ;
1: extern
1: int
1: lists_single_linked_add_head
2: (
1: struct
1: SingleLinked
7: *
1: slist
1: const
1: void
7: *
1: data
3: )
6: ;
1: extern
1: int
1: lists_single_linked_add_tail
2: (
1: struct
1: SingleLinked
7: *
1: slist
1: const
1: void
7: *
1: data
3: )
6: ;
1: extern
1: int
1: lists_single_linked_delete_Node
2: (
1: struct
1: SingleLinked
7: *
1: slist
1: struct
1: Node
7: *
1: node
3: )
6: ;
1: extern
1: struct
1: Node
7: *
1: lists_single_linked_list_get_Node
2: (
1: struct
1: SingleLinked
7: *
1: slist
1: LISTS_SINGLE_COMPARE
1: compare_func
1: const
1: void
7: *
1: data
3: )
6: ;
1: extern
1: struct
1: Node
7: *
1: lists_single_linked_list_get_Node_Linus
2: (
1: struct
1: Node
7: *
7: *
1: head
1: const
1: void
7: *
1: data
3: )
6: ;
1: extern
1: void
1: lists_single_linked_list_display
2: (
1: struct
1: SingleLinked
7: *
1: slist
1: LISTS_SINGLE_DISPLAY
1: display_func
1: const
1: char
7: *
1: name
3: )
6: ;
7: *
7: *
1: Double
1: linked
1: lists
7: *
7: *
1: TODO
2: (
1: elsuizo
4: :
3: )
4: :
1: add
1: the
1: definition
1: of
1: this
1: data
1: structure
1: here
7: *
7: *
7: *
1: custom
1: data
1: structures
7: *
1: struct
1: NodeDouble
10: {
1: void
7: *
1: data
6: ;
1: struct
1: NodeDouble
7: *
1: next
6: ;
1: struct
1: NodeDouble
7: *
1: previous
6: ;
11: }
6: ;
1: struct
1: DoubleLinked
10: {
1: struct
1: NodeDouble
7: *
1: head
6: ;
1: struct
1: NodeDouble
7: *
1: tail
6: ;
1: struct
1: NodeDouble
7: *
1: current
6: ;
1: uint8_t
1: size
6: ;
11: }
6: ;
7: *
7: *
1: prototypes
7: *
1: extern
1: void
1: list_double_linked_init
2: (
1: struct
1: DoubleLinked
7: *
1: dlist
3: )
6: ;
1: extern
1: int
1: lists_double_linked_add_head
2: (
1: struct
1: DoubleLinked
7: *
1: dlist
1: const
1: void
7: *
1: data
3: )
6: ;
1: extern
1: int
1: lists_double_linked_add_tail
2: (
1: struct
1: DoubleLinked
7: *
1: dlist
1: const
1: void
7: *
1: data
3: )
6: ;
1: extern
1: int
1: lists_double_linked_delete_NodeDouble
2: (
1: struct
1: DoubleLinked
7: *
1: dlist
1: struct
1: NodeDouble
7: *
1: dnode
3: )
6: ;
1: extern
1: struct
1: NodeDouble
7: *
1: lists_double_linked_get_NodeDouble
2: (
1: struct
1: DoubleLinked
7: *
1: dlist
1: LISTS_SINGLE_COMPARE
1: compare_func
1: const
1: void
7: *
1: data
3: )
6: ;
1: extern
1: int
1: lists_double_linked_insert_next
2: (
1: struct
1: DoubleLinked
7: *
1: dlist
1: struct
1: NodeDouble
7: *
1: dnode
1: const
1: void
7: *
1: data
3: )
6: ;
1: extern
1: int
1: lists_double_linked_insert_previous
2: (
1: struct
1: DoubleLinked
7: *
1: dlist
1: struct
1: NodeDouble
7: *
1: dnode
1: const
1: void
7: *
1: data
3: )
6: ;
1: extern
1: void
1: list_double_linked_display
2: (
1: struct
1: DoubleLinked
7: *
1: dlist
1: LISTS_SINGLE_DISPLAY
1: display_func
1: const
1: char
7: *
1: name
3: )
6: ;
1: endif
7: *
1: end
1: Lists
7: *
